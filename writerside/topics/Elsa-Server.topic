<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Elsa Server" id="Elsa-Server">

    <p>
        An Elsa Server is an ASP.NET Core web application that lets you manage workflows using a REST API ad execute them.
        You can store your workflows in various places like databases, file systems, or even cloud storage.
        In this topic, we're going to learn how to set one up!
    </p>

    <chapter title="Setup" id="setup">
        <p>
            The following is a step-by-step guide to setting up a new ASP.NET Core Web Application that serves as an Elsa Server.
        </p>

        <procedure>
            <step>
                <control>Create a new ASP.NET project</control>
                <p>
                    Open your command line tool and run these commands:
                </p>

                <code-block lang="console">
                    dotnet new web -n "ElsaServer" -f net8.0
                </code-block>
            </step>

            <step>
                <control>CD into the project's directory</control>
                <p>
                    Run the following command to go into the project's directory.
                </p>

                <code-block lang="console">
                    cd ElsaServer
                </code-block>
            </step>

            <step>
                <control>Add Packages</control>
                <p>Add some commonly used Elsa packages.</p>

                <code-block lang="console">
                    dotnet add package Elsa
                    dotnet add package Elsa.EntityFrameworkCore
                    dotnet add package Elsa.EntityFrameworkCore.Sqlite
                    dotnet add package Elsa.Identity
                    dotnet add package Elsa.Scheduling
                    dotnet add package Elsa.Workflows.Api
                    dotnet add package Elsa.CSharp
                    dotnet add package Elsa.JavaScript
                    dotnet add package Elsa.Liquid
                </code-block>
            </step>

            <step>
                <p>
                    We need to add some code to make our server work.
                    Open the Program.cs file in your project and replace its contents with the code provided below.
                    This code does a lot of things like setting up database connections, enabling user authentication, and preparing the server to handle workflows.
                </p>

                <path>Program.cs</path>
                <code-block lang="c#" src="installation/elsa-server/Program.cs"/>
            </step>
        </procedure>
    </chapter>

    <chapter title="Launch the Application" id="run-application">
        <p>
            To see the application in action, execute the following command:
        </p>
        <code-block lang="console">
            dotnet run --urls "https://localhost:5001"
        </code-block>
    </chapter>

    <chapter title="Source Code" id="source-code">
        <p>
            The source code for this chapter can be found <a href="https://github.com/elsa-workflows/elsa-guides/tree/main/src/installation/elsa-server">here</a>
        </p>
    </chapter>

    <seealso>
        <category ref="related">
            <a href="Elsa-Studio.topic"/>
            <a href="Elsa-Server-Studio.topic"/>
            <a href="Elsa-Web.topic"/>
        </category>
    </seealso>
</topic>
